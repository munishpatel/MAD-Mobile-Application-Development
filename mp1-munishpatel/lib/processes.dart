import 'package:queueing_simulator/util/stats.dart';

/// Base class for all process types.
abstract class Process {
  final String name;
  
  Process(this.name);

  /// Returns a list of all events generated by this process.
  List<Event> generateEvents();
}


/// An event that occurs once at a fixed time.
class Event {
  final String processName;
  final int arrivalTime;
  final int duration;
  int startTime = 0;
  int waitTime = 0;

  Event(this.processName, this.arrivalTime, this.duration);

  void setStartTime(int time) {
    startTime = time;
    waitTime = startTime - arrivalTime;
  }
}


/// Singleton Process class that generates events for a single process.
class SingletonProcess extends Process {
  final int durationTime;
  final int arrivalTime;

  SingletonProcess(String name, 
                   this.durationTime,
                   this.arrivalTime) : super(name);

  @override
  List<Event> generateEvents() {
    return [Event(name, arrivalTime, durationTime)];
  }
}


/// Periodic Process class that generates events for a process that repeats at a fixed interval.
class PeriodicProcess extends Process {
  
  final int interArrivalTime;
  final int firstArrival;
  final int durationTime;
  final int numOfReps;

  PeriodicProcess(String name, 
                  this.durationTime, 
                  this.interArrivalTime, 
                  this.firstArrival, 
                  this.numOfReps) : super(name);

  @override
  List<Event> generateEvents() {
    List<Event> eventList = [];

    // Looping through number of repetitions to schedule events at regular intervals
    for (int i = 0; i < numOfReps; i++) 
    {
      int arrival_time = firstArrival + i * interArrivalTime;
      eventList.add(Event(name, arrival_time, durationTime));
    }

    return eventList;
  }
}


/// Stochastic Process class that generates events for a process with random arrival times.
class StochasticProcess extends Process {
  
  final int firstArrival;
  final int endTime;
  final double meanOfDuration;
  final double meanOfInterArrivalTime;
  

  StochasticProcess(String name, dynamic meanOfDuration, dynamic meanOfInterArrivalTime, this.firstArrival, this.endTime)
      : meanOfDuration = (meanOfDuration is int) ? meanOfDuration.toDouble() : meanOfDuration,
        meanOfInterArrivalTime = (meanOfInterArrivalTime is int) ? meanOfInterArrivalTime.toDouble() : meanOfInterArrivalTime,
        super(name);

  @override
  List<Event> generateEvents() {
    List<Event> eventList = [];

    int time = firstArrival;
    // Usage of exponential distributions for the event duration and inter-arrival times
    final distOfDuration = ExpDistribution(mean: meanOfDuration);
    final distOfInterArrival = ExpDistribution(mean: meanOfInterArrivalTime);

    // Generating events untill time is less than or equal to the endTime
    while (time <= endTime) 
    {
      final eventDuration = distOfDuration.next();
      eventList.add(Event(name, time, eventDuration.toInt()));
      time += distOfInterArrival.next().toInt();
    }

    // Removing events where sum of the event's arrivalTime and its duration exceeds the endTime.
    eventList.removeWhere(
        (event) => event.arrivalTime + event.duration > endTime);

    return eventList;
  }
}